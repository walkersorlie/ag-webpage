var _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow = A3(_evancz$elm_graphics$Element$image, 125, 193, 'sadCow.jpg');
var _elm_lang$elm_architecture_tutorial$RedMeat$cows = function (model) {
	return (_elm_lang$core$Native_Utils.cmp(model.currentVal, 3) < 0) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _evancz$elm_graphics$Element$toHtml(
				A3(_evancz$elm_graphics$Element$image, 270, 270, 'happyCow.jpeg')),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Yah, you\'re eating barely any meat, if any at all! Imagine all the cows who are thanking you, not to mention the planet, which you are helping to save by consuming less meat!'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : (((_elm_lang$core$Native_Utils.cmp(3, model.currentVal) < 1) && (_elm_lang$core$Native_Utils.cmp(model.currentVal, 12) < 0)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _evancz$elm_graphics$Element$toHtml(_elm_lang$elm_architecture_tutorial$RedMeat$addSadCow),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('You\'re still eating meat, but more or less the amount the average American eats, so don\'t think you\'re an outlier. You are average (but I think you can be better than average!).'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : (((_elm_lang$core$Native_Utils.cmp(12, model.currentVal) < 1) && (_elm_lang$core$Native_Utils.cmp(model.currentVal, 21) < 0)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _evancz$elm_graphics$Element$toHtml(
				A2(
					_evancz$elm_graphics$Element$flow,
					_evancz$elm_graphics$Element$right,
					{
						ctor: '::',
						_0: _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow,
						_1: {
							ctor: '::',
							_0: _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow,
							_1: {ctor: '[]'}
						}
					})),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Ooh, you are eating more meat than the average American conumes. The cows aren\'t too pleased, and neither is the planet.'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : (((_elm_lang$core$Native_Utils.cmp(21, model.currentVal) < 1) && (_elm_lang$core$Native_Utils.cmp(model.currentVal, 31) < 0)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _evancz$elm_graphics$Element$toHtml(
				A2(
					_evancz$elm_graphics$Element$flow,
					_evancz$elm_graphics$Element$right,
					{
						ctor: '::',
						_0: _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow,
						_1: {
							ctor: '::',
							_0: _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow,
							_1: {
								ctor: '::',
								_0: _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow,
								_1: {ctor: '[]'}
							}
						}
					})),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Oh man you really like you\'re meat, don\'t you? I strongly suggest cutting back, not only for the sake of the planet, but for the sake of your health. Red meat isn\'t all that good for you.'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : (((_elm_lang$core$Native_Utils.cmp(31, model.currentVal) < 1) && (_elm_lang$core$Native_Utils.cmp(model.currentVal, 41) < 0)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _evancz$elm_graphics$Element$toHtml(
				A2(
					_evancz$elm_graphics$Element$flow,
					_evancz$elm_graphics$Element$right,
					{
						ctor: '::',
						_0: _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow,
						_1: {
							ctor: '::',
							_0: _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow,
							_1: {
								ctor: '::',
								_0: _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow,
								_1: {
									ctor: '::',
									_0: _elm_lang$elm_architecture_tutorial$RedMeat$addSadCow,
									_1: {ctor: '[]'}
								}
							}
						}
					})),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Wow, you are eating about 4x as much meat as the average American. The planet and your health are really suffering. Turn back now!'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}) : A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _evancz$elm_graphics$Element$toHtml(
				A3(_evancz$elm_graphics$Element$image, 250, 250, 'deadEarth.jpg')),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Good thing we all don\'t eat as much as you. You are eating 5x the amount of meat as the average American. If every American ate this much meat, there wouldn\'t be enough space on Earth to sustain us. Reconsider your choices.'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		})))));
};
var _elm_lang$elm_architecture_tutorial$RedMeat$makePar = function (words) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(words),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$elm_architecture_tutorial$RedMeat$calcKilos = function (poundToKilo) {
	return _elm_lang$core$Basics$toFloat(poundToKilo) / 0.453592;
};
var _elm_lang$elm_architecture_tutorial$RedMeat$calcRedMeatEmiss = function (poundOfMeat) {
	return _elm_lang$core$Basics$round(
		((((_elm_lang$elm_architecture_tutorial$RedMeat$calcKilos(poundOfMeat) / 30.44) * 1435) * 365) * (27 / 1435)) * 2.20462);
};
var _elm_lang$elm_architecture_tutorial$RedMeat$calcTons = function (tons) {
	return _elm_lang$core$Basics$round(
		_elm_lang$core$Basics$toFloat(
			_elm_lang$elm_architecture_tutorial$RedMeat$calcRedMeatEmiss(tons)) * 5.0e-4);
};
var _elm_lang$elm_architecture_tutorial$RedMeat$followingText = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$elm_architecture_tutorial$RedMeat$makePar(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Ok, so now that we looked at red meat and you saw that if you eat ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(model.currentVal),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' pounds of meat a month, you create ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(
									_elm_lang$elm_architecture_tutorial$RedMeat$calcTons(model.currentVal)),
								' tons of C02 equivalents a year. Now, lets look at dairy to see what kind of impact your dairy consumption has on the environment.'))))),
			_1: {ctor: '[]'}
		});
};
var _elm_lang$elm_architecture_tutorial$RedMeat$calcVal = function (sliderVal) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$elm_architecture_tutorial$RedMeat$makePar(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'The average American eats about 106 lb of red meat a year, or on average 9 lb a month. For red meat, if you eat ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(sliderVal),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' pound(s) a month, your yearly red meat C02e emissions would be ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(
									_elm_lang$elm_architecture_tutorial$RedMeat$calcRedMeatEmiss(sliderVal)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' lbs C02e, or approximately ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											_elm_lang$elm_architecture_tutorial$RedMeat$calcTons(sliderVal)),
										' tons of C02e per year.'))))))),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$sup,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('(The total emissions includes production emissions and post-production emissions.)'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$elm_architecture_tutorial$RedMeat$bodyUpdate = function (model) {
	var val = _elm_lang$elm_architecture_tutorial$RedMeat$calcVal(model.currentVal);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: val,
			_1: {ctor: '[]'}
		});
};
var _elm_lang$elm_architecture_tutorial$RedMeat$myStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: 'red'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'height', _1: '90px'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
				_1: {ctor: '[]'}
			}
		}
	});
var _elm_lang$elm_architecture_tutorial$RedMeat$sliderMax = _elm_lang$html$Html_Attributes$max('50');
var _elm_lang$elm_architecture_tutorial$RedMeat$sliderMin = _elm_lang$html$Html_Attributes$max('0');
var _elm_lang$elm_architecture_tutorial$RedMeat$update = F2(
	function (num, model) {
		var _p0 = num;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				currentVal: A2(
					_elm_lang$core$Result$withDefault,
					0,
					_elm_lang$core$String$toInt(_p0._0))
			});
	});
var _elm_lang$elm_architecture_tutorial$RedMeat$initialModel = {currentVal: 0};
var _elm_lang$elm_architecture_tutorial$RedMeat$Model = function (a) {
	return {currentVal: a};
};
var _elm_lang$elm_architecture_tutorial$RedMeat$ChangeSlider = function (a) {
	return {ctor: 'ChangeSlider', _0: a};
};
var _elm_lang$elm_architecture_tutorial$RedMeat$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$elm_architecture_tutorial$IntroDialog$view,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$hr,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$elm_architecture_tutorial$RedMeat$bodyUpdate(model),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('range'),
										_1: {
											ctor: '::',
											_0: _elm_lang$elm_architecture_tutorial$RedMeat$sliderMin,
											_1: {
												ctor: '::',
												_0: _elm_lang$elm_architecture_tutorial$RedMeat$sliderMax,
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$value(
														_elm_lang$core$Basics$toString(model.currentVal)),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onInput(_elm_lang$elm_architecture_tutorial$RedMeat$ChangeSlider),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(model.currentVal)),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$elm_architecture_tutorial$RedMeat$cows(model),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$hr,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: _elm_lang$elm_architecture_tutorial$RedMeat$followingText(model),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _elm_lang$elm_architecture_tutorial$RedMeat$main = _elm_lang$html$Html$beginnerProgram(
	{
		model: {currentVal: 9},
		view: _elm_lang$elm_architecture_tutorial$RedMeat$view,
		update: _elm_lang$elm_architecture_tutorial$RedMeat$update
	})();
